<?php

/* 

@author: Pips

@title: User Handler
@desc: class that handles user creation and permission checking.

 userHandler:
 
	__construct(): Build itself by loading everything from file into memory and into users.
	
	createUser(username): Create a user based off of the username given. Server defaults will be used.
	
	saveUser(user): Overrides a user. Either build a new user object and pass it, or use something that returns a user.
	
	save(): Saves all the files and rebuilds the constructor.
	
	generateKey(): Returns a random upload key. upper-alpha-numeric 6 characters.
	
	getUsers(): Returns an array of user objects.
	
	getUsersAsJson(): Returns the JSON data from file.
	
	deleteUser(username): Deletes user with the given username. 
	
	changeKey(username, key): Changes the key generated by generateKey() to whatever is given. Useful for resetting keys or changing them to work with old accounts.
	
	newKey(username): Re-generates the key for the given user.
	
	isValidKey(key): Returns true or false if the given key exists in the keylist.
	
	getUser(username): Returns the user from the given username.
	
	isUser(username): Returns true or false if the given username belongs to a user.
	
	getUserByKey(key): Returns the user who has the given key.
	
*/

class userHandler
{
  protected $SettingsHandler;
  protected $users_json;

  protected $root_dir;

  protected $config;

  private $db;

  function __construct() {

    // create settings handler to check user creation agaist settings
    $this->settingsHandler = new settingsHandler();
    $this->root_dir = ROOTPATH;
    // users array as raw JSON from file
    $json_file = $this->root_dir . '/lib/files/users.json';
    $this->db = new mysqlHandler();
    $this->config = config;

    if (file_exists($json_file)) {
      $this->migrate();
    }
  }

  private function migrate() {
    $this->db->usersMigrate();
  }

  // create user. Should add support to limit uploads. later.
  function createUser($username) {

    if (!$this->isUser($username)) {
      $access_key = $this->generateKey();
      //$filesize_limit = $this->user_dataHandler->getSettings()['limits']['size'];
      $filesize_limit = $this->config['limits']['size'];
      $this->db->userCreate($username, $access_key, $filesize_limit);
    } else {
      # throw user exists error
    }


  }

  // this just saves the json data to the fime.
  function save() {

    file_put_contents(__DIR__ . '/../files/users.json', json_encode($this->users_json, JSON_PRETTY_PRINT));

    $this->__construct();


  }

  // return a randomly generated key. upper-alpha-numeric
  private function generateKey() {

    $legnth = 6;
    $set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

    return substr(str_shuffle($set), 0, $legnth);
  }

  // returns the json array of users.
  function getUsersAsJson() {
    return $this->users_json;
  }

  // delete a user by his/her username.
  function deleteUser($username) {
    if ($this->isUser($username)) {
      $this->db->userDelete($username);
    }

  }

  /**
   * Change the users access key
   *
   * @param $username
   *
   */
  function newKey($username) {
    if ($this->isUser($username)) {
      $access_key = $this->generateKey();
      $this->db->userSetKey($username, $access_key);
    }

  }

  function isUser($username) {
    return $this->db->userCheck($username);
  }

  /**
   * Return the userdata for the user who's key was supplied
   *
   * @param $key
   * @return string
   */
  function getUserByKey($key) {
    return $this->db->keyGetUser($key);
  }

  function generateJson($username) {
    $user = $this->db->userData($username);
		#$user = $this->users_json[$username];
    if ($user != 'Error') {
      $json = json_decode(file_get_contents(__DIR__ . '/../files/import.json'), true);
      $json['Name'] = "$username - " . $GLOBALS['home'];

      $json['RequestURL'] = $GLOBALS['home'] . 'index.php';

      $json['Arguments']['key'] = $user['access_key'];

      $json = json_encode($json, JSON_PRETTY_PRINT);

      header("Content-type: text/json");
      header("Connection: Keep-Alive");
      header("Cache-control: public");
      header("Pragma: public");
      header("Expires: Mon, 27 Mar 2038 13:33:37 GMT");
      header('Content-Disposition: inline; filename="' . $username . '.json"' );
      echo $json;
    } else {
      die("An error occurred");
    }

	}

  function enableUser($username, $enabled) {

    if ($this->isUser($username)) {

    } else {

    }

  }
}


?>